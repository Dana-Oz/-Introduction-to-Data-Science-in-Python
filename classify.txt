#Imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import seaborn as sns


df = pd.read_csv("C:/Users/dana/creditcard.csv")

print(df.head(1))
print("data has {} observations and {} variables".format(df.shape[0],df.shape[1]))

print(df.Class.value_counts()/len(df))
print(df.isnull().sum())

print(df[df['Class']==0].describe)
print(df[df['Class']==1].describe)

numeric_df = df._get_numeric_data()

cat_cols = list(set(df.columns)-set(numeric_df.columns))

cat_df = df[cat_cols]

#plot histogram by class

n= numeric_df.shape[1]

fig = plt.figure(figsize=(12, n*4))
gs= gridspec.GridSpec(n,1)

for i, var in enumerate(numeric_df):
    ax = plt.subplot(gs[i])
    sns.histplot(df[var][df['Class']==0], bins=50, stat='density',kde=True)
    sns.histplot(df[var][df['Class']==1], bins=50, stat='density',kde=True, color='red')
    ax.set_xlabel('')
    ax.set_title('histogram for variable '+str(var))
plt.show()
plt.savefig('hists.png')


#create Heatmap
fig, ax= plt.subplots(figsize=(20,20))
cor_matrix = df.corr()
sns.heatmap(cor_matrix, ax=ax, annot=True)
plt.show()

#create balanced df
df.sample(frac=1) #for non-time series
fraud_df = df[df['Class']==1]
non_fraud_df = df[df['Class']==0][:len(fraud_df )]
balanced_df = pd.concat(fraud_df,non_fraud_df)

#balanced Heatmap
fig, ax= plt.subplots(figsize=(20,20))
cor_matrix = balanced_df.corr()
sns.heatmap(cor_matrix, ax=ax, annot=True)
plt.show()

#categorial features
print(df.groupby(['Class']).Amount.value_counts(normalize=True).reset_index(name="%")) ##remember - this is per variable , not a for loop, also this is not on the regular df this is on the cool df (cat)


#feature engineering:

#1. Drop Features with same distribution - back it up with heatma
#drop V24,V25
df.drop(['V24','V25'], axis =1, inplace =True)

#2.Map values to be fraud\non_fraud in each variable:
df.V1.map(lambda x: 1 if x>2.3 else 0)

#Imputation - fillna()
df['numeric'].fillna(df['numeric'].mean())
df['Categorical'].fillna(df['Categorical'].mode()[0])

#Remove Outliers
#boxplot each variable in df
for i in df.columns:
    df.boxplot(column=i)
    plt.show()


for i in df.columns:
    df = pd.DataFrame({str(i)+" non_fraud": non_fraud_df[i],
                       str(i)+" fraud": fraud_df[i]})
    df.boxplot()
    plt.show()
    
#Encode Categorial ('day') as 'weekend' indicator column - np.where(df.column.isin(['x','y'],1,0)
df['weekend'] = np.where(df['day'].isins(['Sunday','Saturday'],1,0))


#For time-series: split date and time to hours

#Manipulate from your mind
